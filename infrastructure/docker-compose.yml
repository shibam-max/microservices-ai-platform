version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: microservices-postgres
    environment:
      POSTGRES_DB: microservices_ai_platform
      POSTGRES_USER: platform_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_platform_pass_2024}
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - microservices-network

  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: microservices-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-secure_mongo_pass_2024}
      MONGO_INITDB_DATABASE: microservices_ai_platform
    security_opt:
      - no-new-privileges:true
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservices-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: microservices-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - microservices-network

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: microservices-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: microservices-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - microservices-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: microservices-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - microservices-network

  # API Gateway
  api-gateway:
    build:
      context: ../services/api-gateway
      dockerfile: Dockerfile
    container_name: microservices-api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - microservices-network

  # User Service
  user-service:
    build:
      context: ../services/user-service
      dockerfile: Dockerfile
    container_name: microservices-user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - microservices-network

  # Data Service
  data-service:
    build:
      context: ../services/data-service
      dockerfile: Dockerfile
    container_name: microservices-data-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - MONGODB_URI=mongodb://admin:admin123@mongodb:27017/microservices_ai_platform?authSource=admin
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - ELASTICSEARCH_HOST=elasticsearch
    depends_on:
      - postgres
      - mongodb
      - kafka
      - elasticsearch
    networks:
      - microservices-network

  # AI/ML Service
  ai-ml-service:
    build:
      context: ../services/ai-ml-service
      dockerfile: Dockerfile
    container_name: microservices-ai-ml-service
    ports:
      - "8083:8083"
    environment:
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      - redis
      - kafka
    volumes:
      - ./models:/app/models
    networks:
      - microservices-network

  # Notification Service
  notification-service:
    build:
      context: ../services/notification-service
      dockerfile: Dockerfile
    container_name: microservices-notification-service
    ports:
      - "8084:8084"
    environment:
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:29092
      - MONGODB_URI=mongodb://admin:admin123@mongodb:27017/microservices_ai_platform?authSource=admin
    depends_on:
      - redis
      - kafka
      - mongodb
    networks:
      - microservices-network

  # Frontend
  frontend:
    build:
      context: ../frontend/react-app
      dockerfile: Dockerfile
    container_name: microservices-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_WS_URL=http://localhost:8084
    depends_on:
      - api-gateway
      - notification-service
    networks:
      - microservices-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: microservices-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - microservices-network

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: microservices-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - microservices-network

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  kafka_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  microservices-network:
    driver: bridge